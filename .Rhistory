setwd("~/GitHub/R")
<<<<<<< HEAD
Hello word
str(Hello word)
str(Hello Word)
###EJEMPLO VARIABLE DISCRETA
#BINOMIAL: X~B(n=10, p=0.50)
n=10;p=0.5
#MUESTRA ALEATROIA
mB=rbinom(150,n,p);mB
#MASA DE PROBABILIDAD
dbinom(2,n,p)
fmpB=dbinom(x,n,p)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
#
pbinom(2,n,p)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
#Cuantiles
qbinom(0.85,n,p) #Cuantil 0.85
qbinom(seq(0.1,0.25),n,p)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
graf.dist=plot(x,fdpB,type="s",xlab="valores de x", ylab="f.distribucion prob.", ylim=c(0,max(fdpB)));graf.dist
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
#LA PROBABILIDAD DE QUE TOME UN VALOR EXACTO ES 0
dnorm(0.85,mu,sigma)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
#GRAFICA
curve(dnorm(x,mu,sigma),from=-4,to=4)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
ppois(landa)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
ppois(1085,landa, lower.tail = FALSE)
#b)
ppois(1300,landa)-ppois(1199,landa,lower.tail = FALSE)
#b)
ppois(1300,landa)-ppois(1199,landa)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
1-pnorm(70,mi,tau)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
#b)
pnorm(80,mi,tau)-pnorm(39,mi,tau)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
#e)
e=pnorm(70,mi,tau)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
source("~/GitHub/R/Practica 4.R", echo=TRUE)
#EJERCICIO 3
#a)
pexp(45,1/45,lower.tail = FALSE)
#b)
curve(dexp(x,1/40),from=0,to=60)
=======
install.packages("moments")
library(moments)
#a) DETERMINAR LA SIMETRIA DE SUS DISTRIBUCIONES
skewness(altura) #ASIMETRIA
source("~/GitHub/R/Practica 3.R", echo=TRUE)
source("~/GitHub/R/Practica 3.R", echo=TRUE)
source("~/GitHub/R/Practica 3.R", echo=TRUE)
source("~/GitHub/R/Practica 3.R", echo=TRUE)
#c)
edad<-seq(18,by = 0.75,length.out = 10);edad
#b)
peso<-seq(71,77,length.out = 10);peso
#e)
grado.f<-as.factor(grado)
source("~/GitHub/R/Practica 1.R", echo=TRUE)
summary(grado.f)
source("~/GitHub/R/Practica 1.R", echo=TRUE)
source("~/GitHub/R/Practica 1.R", echo=TRUE)
source("~/GitHub/R/Practica 1.R", echo=TRUE)
source("~/GitHub/R/Practica 1.R", echo=TRUE)
source("~/GitHub/R/Practica 1.R", echo=TRUE)
source("~/GitHub/R/Practica 1.R", echo=TRUE)
#f)
grado.f
str(grado.f)
#d)
which(is.na(v))
#d)
is.na(v)
which(is.na(v))
source("~/GitHub/R/Practica 2.R", echo=TRUE)
#Ejercicio 2
#a)
fabs<-table(datos$Grado);fabs #Frecuencia Absoluta
View(datos)
frel<-prop.table(fabs);frel #Frecuencia Relativa
#f)
plot(fabs, type="l",col="red",lwd=3,xlab="Grado",ylab="Frecunecia absoluta",main="Poligono de frecuencias")
plot(fabs, type="b",col="red",lwd=3,xlab="Grado",ylab="Frecunecia absoluta",main="Poligono de frecuencias")
nclass.Sturges(datos$Altura)
source("~/GitHub/R/Practica 2.R", echo=TRUE)
#c)
stem(datos$Altura)
stem(datos$Altura,2)
stem(datos$Altura,0.25,85)
#b)
lim<-seq(L,H,A);lim #Los limites puestos como un Array
L<-min(datos$Altura);H<-max(datos$Altura);L;H;A<-(H-L)/k;A #CALCULAMOS LOS INTERVALOS
intervalos=levels(int.clase);intervalos
#d)
h=hist(datos$Altura,lim,include.lowest=TRUE, right=TRUE, plot=FALSE)
str(h)
>>>>>>> 6f915271a54feb57ee3603d32ccae7fb0fca9475
